#lang typed/racket
(require rackcheck)
(require typed-racket-datatype)

(define-datatype Nat (Zero) (Succ [n : Nat]))
(define-datatype P (PEmpty)
                   (PSet [xs : (Listof Integer)])
                   (PAlt [l : (Listof P)] )
                   (PSeq [l : (Listof P)]) )


(define-datatype PegEx (Empty)
                     (Lit [x : Natural])
                     (Choice [l : PegEx] [r : PegEx])
                     (Seq    [l : PegEx] [r : PegEx])
                     (Rep    [p : PegEx])
                     (Pred   [p : PegEx]) )


(define (natInt [x : Nat]) : Integer
        (match x
          [(Zero) 0]
          [(Succ n) (+ 1 (natInt n))])
  )

; genList = (Name, b)
;


;(struct PGen (sigma genList) #:transparent)
;(struct MSeq (genList) #:transparent)
;(struct MAlt (genList) #:transparent)
;(struct MSet (set)     #:transparent)
;(struct MRec ()        #:transparent)
;(struct MEmpty ()      #:transparent)
;
;(PGen '(a b c) (MSet 'a) )
;
;
;(define (gen:pick l)
;       (gen:bind (gen:integer-in 0 (- (length l) 1))
;                 (lambda (x) (gen:const (list-ref l x)))
;       ))
;
;(define (gen:seq l)
;    (match l
;      ['() (gen:const null)]
;      [(cons y ys) (gen:let ([w (interp y)]
;                             [ws (gen:seq ys)])
;                             (gen:const (cons w ws)) )]))
;
;(define (gen:alt l)
;    (gen:bind (gen:pick l)
;              (lambda (x) (interp x) )))
;
;(define (interp gen)
;     (match gen
;       [(MSet s) (gen:pick s)]
;       [(MSeq l) (gen:seq l)]
;       [(MAlt l) (gen:alt l)]
;       )
;  )